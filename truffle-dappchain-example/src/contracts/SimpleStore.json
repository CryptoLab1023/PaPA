{
  "contractName": "SimpleStore",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "NewValueSet",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "get",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610187806100206000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b1146100515780636d4ce63c1461007e575b600080fd5b34801561005d57600080fd5b5061007c600480360381019080803590602001909291905050506100dc565b005b34801561008a57600080fd5b5061009361014c565b604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b806000819055506000547f7e0b7a35f017ec94e71d7012fe8fa8011f1dab6090674f92de08f8092ab30dda33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a250565b600080600054339150915090915600a165627a7a723058201dfaf9d9a141071257a7fe85f57828c2c69361a274f2180a1936c4c45dc9b4c00029",
  "deployedBytecode": "0x60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b1146100515780636d4ce63c1461007e575b600080fd5b34801561005d57600080fd5b5061007c600480360381019080803590602001909291905050506100dc565b005b34801561008a57600080fd5b5061009361014c565b604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b806000819055506000547f7e0b7a35f017ec94e71d7012fe8fa8011f1dab6090674f92de08f8092ab30dda33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a250565b600080600054339150915090915600a165627a7a723058201dfaf9d9a141071257a7fe85f57828c2c69361a274f2180a1936c4c45dc9b4c00029",
  "sourceMap": "13170:305:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13170:305:0;;;;;;;",
  "deployedSourceMap": "13170:305:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13276:102;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13276:102:0;;;;;;;;;;;;;;;;;;;;;;;;;;13382:91;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13382:91:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13276:102;13326:6;13318:5;:14;;;;13355:5;;13343:30;13362:10;13343:30;;;;;;;;;;;;;;;;;;;;;;13276:102;:::o;13382:91::-;13418:7;13427;13450:5;;13457:10;13442:26;;;;13382:91;;:::o",
  "source": "// pragma solidity ^0.4.24;\n// pragma experimental ABIEncoderV2;\n\n// contract SafeMath {\n//   //internals\n\n//   function safeMul(uint a, uint b) public pure returns (uint) {\n//     uint c = a * b;\n//     assert(a == 0 || c / a == b);\n//     return c;\n//   }\n\n//   function safeSub(uint a, uint b) public pure returns (uint) {\n//     assert(b <= a);\n//     return a - b;\n//   }\n\n//   function safeAdd(uint a, uint b) public pure returns (uint) {\n//     uint c = a + b;\n//     assert(c>=a && c>=b);\n//     return c;\n//   }\n\n//   function safeDiv(uint a, uint b) public pure returns (uint) {\n//       assert(b > 0);\n//       uint c = a / b;\n//       assert(a == b * c + a % b);\n//       return c;\n//   }\n// }\n\n// // ERC 20 Token\n// // https://github.com/ethereum/EIPs/issues/20\n\n// contract Token {\n//     /* This is a slight change to the ERC20 base standard.\n//     function totalSupply() constant returns (uint256 supply);\n//     is replaced with:\n//     uint256 public totalSupply;\n//     This automatically creates a getter function for the totalSupply.\n//     This is moved to the base contract since public getter functions are not\n//     currently recognised as an implementation of the matching abstract\n//     function by the compiler.\n//     */\n//     /// total amount of tokens\n//     uint256 public totalSupply;\n\n//     /// @param _owner The address from which the balance will be retrieved\n//     /// @return The balance\n//     function balanceOf(address _owner) public view returns (uint256 balance);\n\n//     /// @notice send `_value` token to `_to` from `msg.sender`\n//     /// @param _to The address of the recipient\n//     /// @param _value The amount of token to be transferred\n//     /// @return Whether the transfer was successful or not\n//     function transfer(address _to, uint256 _value) public returns (bool success);\n\n//     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n//     /// @param _from The address of the sender\n//     /// @param _to The address of the recipient\n//     /// @param _value The amount of token to be transferred\n//     /// @return Whether the transfer was successful or not\n//     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n//     /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n//     /// @param _spender The address of the account able to transfer the tokens\n//     /// @param _value The amount of tokens to be approved for transfer\n//     /// @return Whether the approval was successful or not\n//     function approve(address _spender, uint256 _value) public returns (bool success);\n\n//     /// @param _owner The address of the account owning tokens\n//     /// @param _spender The address of the account able to transfer the tokens\n//     /// @return Amount of remaining tokens allowed to spent\n//     function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n//     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n//     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n// }\n\n// contract StandardToken is Token {\n\n//     function transfer(address _to, uint256 _value) public returns (bool success) {\n//         //Default assumes totalSupply can't be over max (2^256 - 1).\n//         //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n//         //Replace the if with this one instead.\n//         //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n//         if (balances[msg.sender] >= _value && _value > 0) {\n//             balances[msg.sender] -= _value;\n//             balances[_to] += _value;\n//             emit Transfer(msg.sender, _to, _value);\n//             return true;\n//         } else { return false; }\n//     }\n\n//     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n//         //same as above. Replace this line with the following if you want to protect against wrapping uints.\n//         //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n//         if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n//             balances[_to] += _value;\n//             balances[_from] -= _value;\n//             allowed[_from][msg.sender] -= _value;\n//             emit Transfer(_from, _to, _value);\n//             return true;\n//         } else { return false; }\n//     }\n\n//     function balanceOf(address _owner) public view returns (uint256 balance) {\n//         return balances[_owner];\n//     }\n\n//     function approve(address _spender, uint256 _value) public returns (bool success) {\n//         allowed[msg.sender][_spender] = _value;\n//         emit Approval(msg.sender, _spender, _value);\n//         return true;\n//     }\n\n//     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n//       return allowed[_owner][_spender];\n//     }\n\n//     mapping (address => uint256) balances;\n//     mapping (address => mapping (address => uint256)) allowed;\n// }\n\n\n// /**\n//  * PaPAToken pre-sell contract.\n//  *\n//  */\n// contract PaPAToken is StandardToken, SafeMath {\n\n//     string public name = \"PaPA\";\n//     string public symbol = \"PPA\";\n//     uint public decimals = 18;\n\n//     uint public startDatetime; //pre-sell start datetime seconds\n//     uint public firstStageDatetime; //first 120 hours pre-sell in seconds\n//     uint public secondStageDatetime; //second stage, 240 hours of pre-sell in seconds.\n//     uint public endDatetime; //pre-sell end datetime seconds (set in constructor)\n\n//     // Initial founder address (set in constructor)\n//     // All deposited ETH will be instantly forwarded to this address.\n//     address public founder;\n\n//     // administrator address\n//     address public admin;\n\n//     uint public coinAllocation = 20 * 10**8 * 10**decimals; //2000M tokens supply for pre-sell\n//     uint public angelAllocation = 2 * 10**8 * 10**decimals; // 200M of token supply allocated angel investor\n//     uint public founderAllocation = 3 * 10**8 * 10**decimals; //300M of token supply allocated for the founder allocation\n\n//     bool public founderAllocated = false; //this will change to true when the founder fund is allocated\n\n//     uint public saleTokenSupply = 0; //this will keep track of the token supply created during the pre-sell\n//     uint public salesVolume = 0; //this will keep track of the Ether raised during the pre-sell\n\n//     uint public angelTokenSupply = 0; //this will keep track of the token angel supply\n\n//     bool public halted = false; //the admin address can set this to true to halt the pre-sell due to emergency\n\n//     event Buy(address indexed sender, uint eth, uint tokens);\n//     event AllocateFounderTokens(address indexed sender, uint tokens);\n//     event AllocateAngelTokens(address indexed sender, address to, uint tokens);\n//     event AllocateUnsoldTokens(address indexed sender, address holder, uint tokens);\n\n//     modifier onlyAdmin {\n//         require(msg.sender == admin);\n//         _;\n//     }\n\n//     modifier duringCrowdSale {\n//         require(block.timestamp >= startDatetime && block.timestamp <= endDatetime);\n//         _;\n//     }\n\n//     /**\n//      *\n//      * Integer value representing the number of seconds since 1 January 1970 00:00:00 UTC\n//      */\n//     constructor(uint startDatetimeInSeconds, address founderWallet) public {\n//         admin = msg.sender;\n//         founder = founderWallet;\n//         startDatetime = startDatetimeInSeconds;\n//         firstStageDatetime = startDatetime + 120 * 1 hours;\n//         secondStageDatetime = firstStageDatetime + 240 * 1 hours;\n//         endDatetime = secondStageDatetime + 2040 * 1 hours;\n//     }\n\n//     /**\n//      * Price for crowdsale by time\n//      */\n//     function price(uint timeInSeconds) public view returns(uint) {\n//         if (timeInSeconds < startDatetime) return 0;\n//         if (timeInSeconds <= firstStageDatetime) return 15000; //120 hours\n//         if (timeInSeconds <= secondStageDatetime) return 12000; //240 hours\n//         if (timeInSeconds <= endDatetime) return 10000; //2040 hours\n//         return 0;\n//     }\n\n//     /**\n//      * allow anyone sends funds to the contract\n//      */\n//     function buy() external payable {\n//         buyRecipient(msg.sender);\n//     }\n\n//     function() public payable {\n//         buyRecipient(msg.sender);\n//     }\n\n//     /**\n//      * Main token buy function.\n//      * Buy for the sender itself or buy on the behalf of somebody else (third party address).\n//      */\n//     function buyRecipient(address recipient) public duringCrowdSale payable {\n//         require(!halted);\n\n//         uint tokens = safeMul(msg.value, price(block.timestamp));\n//         require(safeAdd(saleTokenSupply,tokens)<=coinAllocation );\n\n//         balances[recipient] = safeAdd(balances[recipient], tokens);\n\n//         totalSupply = safeAdd(totalSupply, tokens);\n//         saleTokenSupply = safeAdd(saleTokenSupply, tokens);\n//         salesVolume = safeAdd(salesVolume, msg.value);\n\n//         if (!founder.call.value(msg.value)()) revert(); //immediately send Ether to founder address\n\n//         emit Buy(recipient, msg.value, tokens);\n//     }\n\n//     /**\n//      * Set up founder address token balance.\n//      */\n//     function allocateFounderTokens() public onlyAdmin {\n//         require( block.timestamp > endDatetime );\n//         require(!founderAllocated);\n\n//         balances[founder] = safeAdd(balances[founder], founderAllocation);\n//         totalSupply = safeAdd(totalSupply, founderAllocation);\n//         founderAllocated = true;\n\n//         emit AllocateFounderTokens(msg.sender, founderAllocation);\n//     }\n\n//     /**\n//      * Set up angel address token balance.\n//      */\n//     function allocateAngelTokens(address angel, uint tokens) public onlyAdmin {\n\n//         require(safeAdd(angelTokenSupply,tokens) <= angelAllocation );\n\n//         balances[angel] = safeAdd(balances[angel], tokens);\n//         angelTokenSupply = safeAdd(angelTokenSupply, tokens);\n//         totalSupply = safeAdd(totalSupply, tokens);\n\n//         emit AllocateAngelTokens(msg.sender, angel, tokens);\n//     }\n\n//     /**\n//      * Emergency Stop crowdsale.\n//      */\n//     function halt() public onlyAdmin {\n//         halted = true;\n//     }\n\n//     function unhalt() public onlyAdmin {\n//         halted = false;\n//     }\n\n//     /**\n//      * Change admin address.\n//      */\n//     function changeAdmin(address newAdmin) public onlyAdmin  {\n//         admin = newAdmin;\n//     }\n\n//     /**\n//      * arrange unsold coins\n//      */\n//     function arrangeUnsoldTokens(address holder, uint256 tokens) public onlyAdmin {\n//         require( block.timestamp > endDatetime );\n//         require( safeAdd(saleTokenSupply,tokens) <= coinAllocation );\n//         require( balances[holder] >0 );\n\n//         balances[holder] = safeAdd(balances[holder], tokens);\n//         saleTokenSupply = safeAdd(saleTokenSupply, tokens);\n//         totalSupply = safeAdd(totalSupply, tokens);\n\n//         emit AllocateUnsoldTokens(msg.sender, holder, tokens);\n\n//     }\n// }\n\n// contract PaPABase is PaPAToken {\n\n//     string[] comment;\n//     mapping(uint => address) public commentToSender;\n//     mapping(uint => address) public commentToReceiver;\n\n//     mapping(address => uint) public sentCommentCounts;\n//     mapping(address => uint) public receivedCommentCounts;\n\n\n//     function sendMessage(address _to, string _comment) external {\n//         address sender = msg.sender;\n//         uint id = comment.push(_comment);\n//         commentToSender[id] = sender;\n//         commentToReceiver[id] = _to;\n//         sentCommentCounts[sender]++;\n//         receivedCommentCounts[_to]++;\n//     }\n\n//     function getMessages() external view returns(string[]) {\n//         address sender = msg.sender;\n//         uint counter = 0;\n//         string[] memory messages = new string[](receivedCommentCounts[address(sender)]);\n//         for(uint i = 0; i < comment.length; i++) {\n//             if( commentToReceiver[i] == sender) {\n//                 messages[counter] = comment[i];\n//             }\n//         }\n//         return messages;\n//     }\n\n//     function getComments() external view returns(string[]) {\n//         address sender = msg.sender;\n//         uint counter = 0;\n//         string[] memory comments = new string[](sentCommentCounts[address(sender)]);\n//         for(uint i = 0; i < comment.length; i++) {\n//             if( commentToSender[i] == sender) {\n//                 comments[counter] = comment[i];\n//             }\n//         }\n//         return comments;\n//     }\n\n//     function getEvaluation(address _from, uint _amount) external {\n//         transferFrom(_from, msg.sender, _amount);\n//     }\n\n//     function _evaluation(address _receiver, uint _amount) private {\n//         approve(_receiver, _amount);\n//     }\n\n// }\npragma solidity ^0.4.22;\n  \ncontract SimpleStore {\n  uint256 value;\n\n  event NewValueSet(uint256 indexed _value, address _sender);\n\n  function set(uint256 _value) public {\n    value = _value;\n    emit NewValueSet(value, msg.sender);\n  }\n\n  function get() public view returns (uint256, address) {\n    return (value, msg.sender);\n  }\n}",
  "sourcePath": "/Users/ko/loom_papa/PaPA/truffle-dappchain-example/contracts/SimpleStore.sol",
  "ast": {
    "absolutePath": "/Users/ko/loom_papa/PaPA/truffle-dappchain-example/contracts/SimpleStore.sol",
    "exportedSymbols": {
      "SimpleStore": [
        39
      ]
    },
    "id": 40,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".22"
        ],
        "nodeType": "PragmaDirective",
        "src": "13142:24:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 39,
        "linearizedBaseContracts": [
          39
        ],
        "name": "SimpleStore",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 3,
            "name": "value",
            "nodeType": "VariableDeclaration",
            "scope": 39,
            "src": "13195:13:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "13195:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 9,
            "name": "NewValueSet",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5,
                  "indexed": true,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 9,
                  "src": "13231:22:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13231:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7,
                  "indexed": false,
                  "name": "_sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 9,
                  "src": "13255:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13255:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13230:41:0"
            },
            "src": "13213:59:0"
          },
          {
            "body": {
              "id": 24,
              "nodeType": "Block",
              "src": "13312:66:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 16,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 14,
                      "name": "value",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3,
                      "src": "13318:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 15,
                      "name": "_value",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11,
                      "src": "13326:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "13318:14:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 17,
                  "nodeType": "ExpressionStatement",
                  "src": "13318:14:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 19,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3,
                        "src": "13355:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 20,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 54,
                          "src": "13362:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 21,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "13362:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 18,
                      "name": "NewValueSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9,
                      "src": "13343:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
                        "typeString": "function (uint256,address)"
                      }
                    },
                    "id": 22,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13343:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23,
                  "nodeType": "EmitStatement",
                  "src": "13338:35:0"
                }
              ]
            },
            "documentation": null,
            "id": 25,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "set",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 25,
                  "src": "13289:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13289:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13288:16:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13312:0:0"
            },
            "scope": 39,
            "src": "13276:102:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 37,
              "nodeType": "Block",
              "src": "13436:37:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "id": 32,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3,
                        "src": "13450:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 33,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 54,
                          "src": "13457:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 34,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "13457:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "id": 35,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "13449:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_address_$",
                      "typeString": "tuple(uint256,address)"
                    }
                  },
                  "functionReturnParameters": 31,
                  "id": 36,
                  "nodeType": "Return",
                  "src": "13442:26:0"
                }
              ]
            },
            "documentation": null,
            "id": 38,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "get",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13394:2:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 31,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 38,
                  "src": "13418:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13418:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 30,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 38,
                  "src": "13427:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13427:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13417:18:0"
            },
            "scope": 39,
            "src": "13382:91:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 40,
        "src": "13170:305:0"
      }
    ],
    "src": "13142:333:0"
  },
  "legacyAST": {
    "absolutePath": "/Users/ko/loom_papa/PaPA/truffle-dappchain-example/contracts/SimpleStore.sol",
    "exportedSymbols": {
      "SimpleStore": [
        39
      ]
    },
    "id": 40,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".22"
        ],
        "nodeType": "PragmaDirective",
        "src": "13142:24:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 39,
        "linearizedBaseContracts": [
          39
        ],
        "name": "SimpleStore",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 3,
            "name": "value",
            "nodeType": "VariableDeclaration",
            "scope": 39,
            "src": "13195:13:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "13195:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 9,
            "name": "NewValueSet",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5,
                  "indexed": true,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 9,
                  "src": "13231:22:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13231:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7,
                  "indexed": false,
                  "name": "_sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 9,
                  "src": "13255:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13255:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13230:41:0"
            },
            "src": "13213:59:0"
          },
          {
            "body": {
              "id": 24,
              "nodeType": "Block",
              "src": "13312:66:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 16,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 14,
                      "name": "value",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3,
                      "src": "13318:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 15,
                      "name": "_value",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11,
                      "src": "13326:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "13318:14:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 17,
                  "nodeType": "ExpressionStatement",
                  "src": "13318:14:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 19,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3,
                        "src": "13355:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 20,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 54,
                          "src": "13362:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 21,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "13362:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 18,
                      "name": "NewValueSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9,
                      "src": "13343:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
                        "typeString": "function (uint256,address)"
                      }
                    },
                    "id": 22,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13343:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23,
                  "nodeType": "EmitStatement",
                  "src": "13338:35:0"
                }
              ]
            },
            "documentation": null,
            "id": 25,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "set",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 25,
                  "src": "13289:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13289:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13288:16:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13312:0:0"
            },
            "scope": 39,
            "src": "13276:102:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 37,
              "nodeType": "Block",
              "src": "13436:37:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "id": 32,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3,
                        "src": "13450:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 33,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 54,
                          "src": "13457:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 34,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "13457:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "id": 35,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "13449:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_address_$",
                      "typeString": "tuple(uint256,address)"
                    }
                  },
                  "functionReturnParameters": 31,
                  "id": 36,
                  "nodeType": "Return",
                  "src": "13442:26:0"
                }
              ]
            },
            "documentation": null,
            "id": 38,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "get",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13394:2:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 31,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 38,
                  "src": "13418:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13418:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 30,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 38,
                  "src": "13427:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13427:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "13417:18:0"
            },
            "scope": 39,
            "src": "13382:91:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 40,
        "src": "13170:305:0"
      }
    ],
    "src": "13142:333:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {
    "474747": {
      "events": {},
      "links": {},
      "address": "0x1a31b9b9d281d49001fe7f3f638000a739afc9c3",
      "transactionHash": "0x0384ac9f1ce0512d3c99a9629f2a5f48bf217ed5a0a32be2f7a3c7ccf5100011"
    }
  },
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-08-11T03:51:45.017Z"
}